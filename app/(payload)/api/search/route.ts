import { NextRequest, NextResponse } from 'next/server'
import { getPayload } from 'payload'
import config from '@payload-config'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è HTML entities
function decodeHtmlEntities(text: string): string {
  const entities: Record<string, string> = {
    '&nbsp;': ' ',
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&ldquo;': '"',
    '&rdquo;': '"',
    '&lsquo;': "'",
    '&rsquo;': "'",
    '&mdash;': '‚Äî',
    '&ndash;': '‚Äì',
  }
  
  return text.replace(/&[#\w]+;/g, (entity) => entities[entity] || entity)
}

export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const query = searchParams.get('q')

    if (!query || query.trim().length < 2) {
      return NextResponse.json(
        { error: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ - 2 —Å–∏–º–≤–æ–ª–∞' },
        { status: 400 }
      )
    }

    const payload = await getPayload({ config })

    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å –ª–∏–º–∏—Ç–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    const pagesResult = await payload.find({
      collection: 'pages',
      limit: 100,
      depth: 1, // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≥–ª—É–±–æ–∫–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    })

    const queryLower = query.toLowerCase()

    console.log(`üîç –ü–æ–∏—Å–∫: "${query}" | –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${pagesResult.docs.length}`)

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const allResults = pagesResult.docs.map((page) => {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¢–û–õ–¨–ö–û –ò–ó –ë–õ–û–ö–û–í (—Ç–æ —á—Ç–æ –≤–∏–¥–Ω–æ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ)
      let blockText = ''
      let heroTitle = ''
      let heroDescription = ''
      
      if (page.layout && Array.isArray(page.layout)) {
        page.layout.forEach((block) => {
          if (block.blockType === 'hero') {
            const title = decodeHtmlEntities(block.title || '')
            const description = decodeHtmlEntities(block.description || '')
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π Hero –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (!heroTitle) {
              heroTitle = title
              heroDescription = description
            }
            
            blockText += ` ${title} ${description}`
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –±–µ–π–¥–∂–µ–π
            if (block.badges && Array.isArray(block.badges)) {
              block.badges.forEach((badge) => {
                blockText += ` ${decodeHtmlEntities(badge.label || '')}`
              })
            }
          } else if (block.blockType === 'form') {
            blockText += ` ${decodeHtmlEntities(block.title || '')} ${decodeHtmlEntities(block.description || '')}`
          }
        })
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –±–ª–æ–∫–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      if (!blockText.trim()) {
        return null
      }

      // –ò—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –±–ª–æ–∫–æ–≤ (—Ç–æ —á—Ç–æ –≤–∏–¥–Ω–æ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ)
      const allText = blockText.toLowerCase()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      const hasMatch = allText.includes(queryLower)

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (hasMatch) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤: "${heroTitle || page.slug}" | –ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –±–ª–æ–∫–æ–≤`)
      }

      if (!hasMatch) {
        return null
      }

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π snippet –∏–∑ –±–ª–æ–∫–æ–≤
      let snippet = heroDescription
      const queryPosition = blockText.toLowerCase().indexOf(queryLower)
      
      if (queryPosition !== -1) {
        const start = Math.max(0, queryPosition - 50)
        const end = Math.min(blockText.length, queryPosition + query.length + 50)
        snippet = blockText.substring(start, end).trim()
        if (start > 0) snippet = '...' + snippet
        if (end < blockText.length) snippet = snippet + '...'
      }

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É snippet
      if (snippet && snippet.length > 200) {
        snippet = snippet.substring(0, 200) + '...'
      }

      // –ï—Å–ª–∏ snippet –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞
      if (!snippet || snippet.trim() === '') {
        snippet = blockText.substring(0, 150).trim() + '...'
      }

      return {
        id: page.id,
        title: heroTitle || page.slug, // –ë–µ—Ä–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ Hero –±–ª–æ–∫–∞
        slug: page.slug,
        description: snippet,
        url: `/${page.slug}`,
      }
    })

    // –£–±–∏—Ä–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10
    const results = allResults.filter(Boolean).slice(0, 10)

    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: –Ω–∞–π–¥–µ–Ω–æ ${results.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π`)

    return NextResponse.json({
      results,
      total: results.length,
      query,
    })
  } catch (error) {
    console.error('Search error:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞' },
      { status: 500 }
    )
  }
}

