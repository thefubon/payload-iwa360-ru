import { NextRequest, NextResponse } from 'next/server'
import { getPayload } from 'payload'
import config from '@payload-config'
import { Resend } from 'resend'
import type { ApiFormField, ApiFormData } from '@/types/api'

export async function POST(request: NextRequest) {
  try {
    const payload = await getPayload({ config })
    const body = await request.json()
    
    const { formId, data } = body

    if (!formId || !data) {
      return NextResponse.json(
        { error: 'Missing formId or data' },
        { status: 400 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const formResult = await payload.findByID({
      collection: 'forms',
      id: formId,
    })

    if (!formResult) {
      return NextResponse.json(
        { error: 'Form not found' },
        { status: 404 }
      )
    }

    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ç–∏–ø—É ApiFormData
    const form = formResult as unknown as ApiFormData

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    const errors: Record<string, string> = {}
    
    form.fields?.forEach((field: ApiFormField) => {
      if (field.required && (!data[field.name] || data[field.name].trim() === '')) {
        errors[field.name] = `–ü–æ–ª–µ "${field.label}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è email
      if (field.fieldType === 'email' && data[field.name]) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
        if (!emailRegex.test(data[field.name])) {
          errors[field.name] = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'
        }
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      if (field.fieldType === 'tel' && data[field.name]) {
        const phoneRegex = /^[\d\s\+\-\(\)]+$/
        if (!phoneRegex.test(data[field.name])) {
          errors[field.name] = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
        }
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
      if (field.fieldType === 'url' && data[field.name]) {
        try {
          new URL(data[field.name])
        } catch {
          errors[field.name] = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL'
        }
      }
    })

    if (Object.keys(errors).length > 0) {
      return NextResponse.json(
        { error: 'Validation failed', errors },
        { status: 400 }
      )
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º submission –≤ –±–∞–∑—É
    const userIP = request.headers.get('x-forwarded-for') || 
                   request.headers.get('x-real-ip') || 
                   'unknown'
    const userAgent = request.headers.get('user-agent') || 'unknown'

    await payload.create({
      collection: 'form-submissions',
      data: {
        form: formId,
        submissionData: data,
        userIP,
        userAgent,
      },
    })

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if (form.emailTo) {
      await sendAdminEmail(form, data)
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if (form.sendEmailToUser) {
      const userEmail = findUserEmail(form.fields, data)
      if (userEmail) {
        await sendUserEmail(form, userEmail)
      }
    }

    return NextResponse.json({
      success: true,
      successTitle: form.successTitle || '–°–ø–∞—Å–∏–±–æ!',
      successMessage: form.successMessage || '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.',
      showSuccessIcon: form.showSuccessIcon !== false,
    })

  } catch (error) {
    console.error('‚ùå Form submission error:', error)
    console.error('Error details:', {
      name: error instanceof Error ? error.name : 'Unknown',
      message: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined
    })
    
    return NextResponse.json(
      { 
        error: 'Internal server error',
        details: error instanceof Error ? error.message : String(error)
      },
      { status: 500 }
    )
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
function findUserEmail(fields: ApiFormField[] | undefined, data: Record<string, string>): string | null {
  const emailField = fields?.find((field) => field.fieldType === 'email')
  return emailField ? data[emailField.name] : null
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async function sendAdminEmail(form: ApiFormData, data: Record<string, string>) {
  // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è –ø–∏—Å—å–º–∞
  let emailHtml = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <h2 style="color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px;">
        –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Ñ–æ—Ä–º—ã: ${form.title}
      </h2>
      <table style="border-collapse: collapse; width: 100%; margin-top: 20px;">
  `
  
  form.fields?.forEach((field: ApiFormField) => {
    const value = data[field.name] || '-'
    emailHtml += `
      <tr style="border-bottom: 1px solid #eee;">
        <td style="padding: 12px 8px; font-weight: bold; width: 200px; color: #555;">${field.label}:</td>
        <td style="padding: 12px 8px; color: #333;">${value}</td>
      </tr>
    `
  })
  
  emailHtml += `
      </table>
      <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #777; font-size: 12px;">
               <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ IWA360</p>
      </div>
    </div>
  `

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Resend API –∫–ª—é—á–∞
  const resendApiKey = process.env.RESEND_API_KEY
  const fromEmail = process.env.RESEND_FROM_EMAIL || 'onboarding@resend.dev'

  if (!resendApiKey) {
    console.warn('‚ö†Ô∏è RESEND_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ')
    console.log('üìß Email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ù–ï –û–¢–ü–†–ê–í–õ–ï–ù):')
    console.log('   To:', form.emailTo)
    console.log('   Subject:', form.emailSubject || '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞')
    console.log('   HTML:', emailHtml)
    console.log('\nüí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email –¥–æ–±–∞–≤—å—Ç–µ –≤ .env:')
    console.log('   RESEND_API_KEY=your_api_key_here')
    console.log('   RESEND_FROM_EMAIL=noreply@yourdomain.com')
    return
  }

  try {
    const resend = new Resend(resendApiKey)
    const { data: emailData, error } = await resend.emails.send({
      from: fromEmail,
      to: form.emailTo,
      subject: form.emailSubject || '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞',
      html: emailHtml,
    })

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error)
      throw error
    }

    console.log('‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', emailData)
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email:', error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendUserEmail(form: ApiFormData, userEmail: string) {
  const emailTitle = form.userEmailTitle || form.successTitle || '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!'
  const emailMessage = form.userEmailMessage || form.successMessage || '–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
  
  const emailHtml = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
      <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; border-radius: 10px 10px 0 0; text-align: center;">
        <h2 style="color: #ffffff; margin: 0; font-size: 24px; font-weight: 600;">${emailTitle}</h2>
      </div>
      <div style="background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px;">
        <p style="color: #333; font-size: 16px; line-height: 1.6; white-space: pre-line;">${emailMessage}</p>
        <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd;">
          <p style="color: #777; font-size: 14px; margin: 0;">–° —É–≤–∞–∂–µ–Ω–∏–µ–º,</p>
                 <p style="color: #333; font-size: 16px; font-weight: bold; margin: 5px 0 0 0;">–ö–æ–º–∞–Ω–¥–∞ IWA360</p>
        </div>
      </div>
    </div>
  `

  const resendApiKey = process.env.RESEND_API_KEY
  const fromEmail = process.env.RESEND_FROM_EMAIL || 'onboarding@resend.dev'

  if (!resendApiKey) {
    console.warn('‚ö†Ô∏è RESEND_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω - email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
    console.log('üìß Email –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ù–ï –û–¢–ü–†–ê–í–õ–ï–ù):')
    console.log('   To:', userEmail)
    console.log('   Subject:', form.userEmailSubject || '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!')
    return
  }

  try {
    const resend = new Resend(resendApiKey)
    const { data: emailData, error } = await resend.emails.send({
      from: fromEmail,
      to: userEmail,
      subject: form.userEmailSubject || '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!',
      html: emailHtml,
    })

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error)
      throw error
    }

    console.log('‚úÖ Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', emailData)
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error)
    // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
  }
}

