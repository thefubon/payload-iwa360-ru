// –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö ENUM —Ç–∏–ø–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
import pg from 'pg'
const { Client } = pg

const DATABASE_URI = process.env.DATABASE_URI || 'postgresql://neondb_owner:npg_GoZsct7l2Jre@ep-sparkling-sun-abf0z3iz-pooler.eu-west-2.aws.neon.tech/neondb?sslmode=require'

async function fixEnums() {
  const client = new Client({
    connectionString: DATABASE_URI,
  })

  try {
    await client.connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ ENUM —Ç–∏–ø—ã
    await client.query('DROP TYPE IF EXISTS "public"."enum_pages_blocks_hero_button_custom_color" CASCADE')
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω enum_pages_blocks_hero_button_custom_color')

    await client.query('DROP TYPE IF EXISTS "public"."enum_pages_blocks_hero_button_text_color" CASCADE')
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω enum_pages_blocks_hero_button_text_color')

    console.log('\n‚úÖ –í—Å–µ ENUM —Ç–∏–ø—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!')
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, Payload —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message)
    process.exit(1)
  } finally {
    await client.end()
  }
}

fixEnums()

